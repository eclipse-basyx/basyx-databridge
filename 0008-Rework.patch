From 97ce5b18a2fb0934a2978613cf68694db236827d Mon Sep 17 00:00:00 2001
From: Frank Schnicke <frank.schnicke@iese.fraunhofer.de>
Date: Fri, 6 Jan 2023 12:56:18 +0100
Subject: [PATCH 8/8] Rework

---
 ...aterComponent.java => DataBridgeComponent.java} |  6 +--
 .../activemqjsonataaas/test/TestAASUpdater.java    |  6 +--
 .../honojsonataaas/test/TestAASUpdater.java        |  6 +--
 .../httppollingjsonataaas/test/TestAASUpdater.java |  6 +--
 .../kafkajsonataaas/test/TestAASUpdater.java       |  6 +--
 .../test/TestAASUpdater.java                       |  6 +--
 .../mqttjsonataaas/test/TestAASUpdater.java        |  6 +--
 .../examples/opcuaaas/test/TestAASUpdater.java     |  6 +--
 .../prometheusjsonataaas/test/TestAASUpdater.java  |  6 +--
 .../executable/DataBridgeExecutable.java           | 19 +++++---
 ...mponent.java => RoutesConfigurationLoader.java} | 24 ++++------
 .../databridge/regression/DataBridgeUtilsTest.java | 49 ++++++++++++++++++++
 .../regression/TestDataBridgeActiveMQ.java         |  6 +--
 .../databridge/regression/TestDataBridgeMqtt.java  |  6 +--
 ...ent.java => TestRoutesConfigurationLoader.java} | 52 +++++++---------------
 .../src/test/resources/activemqconsumer.json       |  8 ----
 16 files changed, 120 insertions(+), 98 deletions(-)
 rename basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/{UpdaterComponent.java => DataBridgeComponent.java} (92%)
 rename basyx.components.databridge/src/main/java/basyx/components/databridge/executable/{DataBridgeComponent.java => RoutesConfigurationLoader.java} (88%)
 create mode 100644 basyx.components.databridge/src/test/java/basyx/components/databridge/regression/DataBridgeUtilsTest.java
 rename basyx.components.databridge/src/test/java/basyx/components/databridge/regression/{TestDataBridgeComponent.java => TestRoutesConfigurationLoader.java} (56%)
 delete mode 100644 basyx.components.databridge/src/test/resources/activemqconsumer.json

diff --git a/basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/UpdaterComponent.java b/basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/DataBridgeComponent.java
similarity index 92%
rename from basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/UpdaterComponent.java
rename to basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/DataBridgeComponent.java
index e3b32d6..6a72cae 100644
--- a/basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/UpdaterComponent.java
+++ b/basyx.components.databridge.core/src/main/java/basyx/components/databridge/core/component/DataBridgeComponent.java
@@ -35,13 +35,13 @@ import basyx.components.databridge.core.routebuilder.DataBridgeRouteBuilder;
  * @author haque, fischer
  *
  */
-public class UpdaterComponent implements IComponent {
-	private static Logger logger = LoggerFactory.getLogger(UpdaterComponent.class);
+public class DataBridgeComponent implements IComponent {
+	private static Logger logger = LoggerFactory.getLogger(DataBridgeComponent.class);
 	private DataBridgeRouteBuilder orchestrator;
 
 	protected CamelContext camelContext;
 
-	public UpdaterComponent(RoutesConfiguration configuration) {
+	public DataBridgeComponent(RoutesConfiguration configuration) {
 		camelContext = new DefaultCamelContext();
 		orchestrator = new DataBridgeRouteBuilder(configuration, getRouteCreatorFactoryMapDefault());
 	}
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.activemq-jsonata-aas/src/test/java/basyx/components/databridge/examples/activemqjsonataaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.activemq-jsonata-aas/src/test/java/basyx/components/databridge/examples/activemqjsonataaas/test/TestAASUpdater.java
index 55b2e73..7ab2e2c 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.activemq-jsonata-aas/src/test/java/basyx/components/databridge/examples/activemqjsonataaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.activemq-jsonata-aas/src/test/java/basyx/components/databridge/examples/activemqjsonataaas/test/TestAASUpdater.java
@@ -32,14 +32,14 @@ import org.junit.Test;
 
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelactivemq.configuration.factory.ActiveMQDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 	private static Connection connection;
 	private static Session session;
@@ -83,7 +83,7 @@ public class TestAASUpdater {
 		JsonataDefaultConfigurationFactory jsonataConfigFactory = new JsonataDefaultConfigurationFactory(loader);
 		configuration.addTransformers(jsonataConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		System.out.println("PUBLISH EVENT");
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.hono-jsonata-aas/src/test/java/basyx/components/databridge/examples/honojsonataaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.hono-jsonata-aas/src/test/java/basyx/components/databridge/examples/honojsonataaas/test/TestAASUpdater.java
index 51927a7..f59f38d 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.hono-jsonata-aas/src/test/java/basyx/components/databridge/examples/honojsonataaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.hono-jsonata-aas/src/test/java/basyx/components/databridge/examples/honojsonataaas/test/TestAASUpdater.java
@@ -14,7 +14,7 @@ import org.junit.Ignore;
 import org.junit.Test;
 
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.hono.configuration.factory.HonoDefaultConfigurationFactory;
@@ -22,7 +22,7 @@ import basyx.components.databridge.transformer.cameljsonata.configuration.factor
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 
 	protected static IIdentifier deviceAAS = new CustomId("TestUpdatedDeviceAAS");
@@ -64,7 +64,7 @@ public class TestAASUpdater {
 		JsonataDefaultConfigurationFactory jsonataConfigFactory = new JsonataDefaultConfigurationFactory(loader);
 		configuration.addTransformers(jsonataConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		Thread.sleep(100000);
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.httppolling-jsonata-aas/src/test/java/basyx/components/databridge/examples/httppollingjsonataaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.httppolling-jsonata-aas/src/test/java/basyx/components/databridge/examples/httppollingjsonataaas/test/TestAASUpdater.java
index 39637c3..ac8f266 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.httppolling-jsonata-aas/src/test/java/basyx/components/databridge/examples/httppollingjsonataaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.httppolling-jsonata-aas/src/test/java/basyx/components/databridge/examples/httppollingjsonataaas/test/TestAASUpdater.java
@@ -25,14 +25,14 @@ import org.mockserver.model.HttpStatusCode;
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelhttppolling.configuration.factory.HttpPollingDefaultConfigurationFactory;
 import basyx.components.databridge.cameltimer.configuration.factory.TimerDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 
 	protected static IIdentifier deviceAAS = new CustomId("TestUpdatedDeviceAAS");
@@ -84,7 +84,7 @@ public class TestAASUpdater {
 		TimerDefaultConfigurationFactory timerConfigFactory = new TimerDefaultConfigurationFactory(loader);
 		configuration.addDatasources(timerConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		waitForPropagation();
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonata-aas/src/test/java/basyx/components/databridge/examples/kafkajsonataaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonata-aas/src/test/java/basyx/components/databridge/examples/kafkajsonataaas/test/TestAASUpdater.java
index b5814dc..789b83c 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonata-aas/src/test/java/basyx/components/databridge/examples/kafkajsonataaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonata-aas/src/test/java/basyx/components/databridge/examples/kafkajsonataaas/test/TestAASUpdater.java
@@ -29,14 +29,14 @@ import org.junit.Test;
 
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelkafka.configuration.factory.KafkaDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 
 	protected static IIdentifier deviceAAS = new CustomId("TestUpdatedDeviceAAS");
@@ -77,7 +77,7 @@ public class TestAASUpdater {
 		JsonataDefaultConfigurationFactory jsonataConfigFactory = new JsonataDefaultConfigurationFactory(loader);
 		configuration.addTransformers(jsonataConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		publishNewDatapoint();
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonatamultiple-aas/src/test/java/basyx/components/databridge/examples/kafkajsonatamultipleaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonatamultiple-aas/src/test/java/basyx/components/databridge/examples/kafkajsonatamultipleaas/test/TestAASUpdater.java
index fa5390a..4069ddc 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonatamultiple-aas/src/test/java/basyx/components/databridge/examples/kafkajsonatamultipleaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.kafka-jsonatamultiple-aas/src/test/java/basyx/components/databridge/examples/kafkajsonatamultipleaas/test/TestAASUpdater.java
@@ -29,14 +29,14 @@ import org.junit.Test;
 
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelkafka.configuration.factory.KafkaDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 
 	protected static IIdentifier deviceAAS = new CustomId("TestUpdatedDeviceAAS");
@@ -78,7 +78,7 @@ public class TestAASUpdater {
 		JsonataDefaultConfigurationFactory jsonataConfigFactory = new JsonataDefaultConfigurationFactory(loader);
 		configuration.addTransformers(jsonataConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		publishNewDatapoint();
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.mqtt-jsonata-aas/src/test/java/basyx/components/databridge/examples/mqttjsonataaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.mqtt-jsonata-aas/src/test/java/basyx/components/databridge/examples/mqttjsonataaas/test/TestAASUpdater.java
index db76c5f..29d804d 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.mqtt-jsonata-aas/src/test/java/basyx/components/databridge/examples/mqttjsonataaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.mqtt-jsonata-aas/src/test/java/basyx/components/databridge/examples/mqttjsonataaas/test/TestAASUpdater.java
@@ -26,7 +26,7 @@ import org.junit.Test;
 
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelpaho.configuration.factory.MqttDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
@@ -38,7 +38,7 @@ import io.moquette.broker.config.ResourceLoaderConfig;
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 	protected static Server mqttBroker;
 
@@ -81,7 +81,7 @@ public class TestAASUpdater {
 		JsonataDefaultConfigurationFactory jsonataConfigFactory = new JsonataDefaultConfigurationFactory(loader);
 		configuration.addTransformers(jsonataConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		System.out.println("PUBLISH EVENT");
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.opcua-jsonata-aas/src/test/java/basyx/components/databridge/examples/opcuaaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.opcua-jsonata-aas/src/test/java/basyx/components/databridge/examples/opcuaaas/test/TestAASUpdater.java
index b11fd23..9a12c4b 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.opcua-jsonata-aas/src/test/java/basyx/components/databridge/examples/opcuaaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.opcua-jsonata-aas/src/test/java/basyx/components/databridge/examples/opcuaaas/test/TestAASUpdater.java
@@ -22,7 +22,7 @@ import org.junit.Test;
 
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelopcua.configuration.factory.OpcuaDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
@@ -30,7 +30,7 @@ import basyx.components.databridge.transformer.cameljsonjackson.configuration.fa
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 	protected static ExampleServer opcUaServer;
 
@@ -84,7 +84,7 @@ public class TestAASUpdater {
 		JsonataDefaultConfigurationFactory jsonataConfigFactory = new JsonataDefaultConfigurationFactory(loader);
 		configuration.addTransformers(jsonataConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		Thread.sleep(5000);
diff --git a/basyx.components.databridge.examples/basyx.components.databridge.examples.prometheus-jsonata-aas/src/test/java/basyx/components/databridge/examples/prometheusjsonataaas/test/TestAASUpdater.java b/basyx.components.databridge.examples/basyx.components.databridge.examples.prometheus-jsonata-aas/src/test/java/basyx/components/databridge/examples/prometheusjsonataaas/test/TestAASUpdater.java
index 0005adc..2ba6c73 100644
--- a/basyx.components.databridge.examples/basyx.components.databridge.examples.prometheus-jsonata-aas/src/test/java/basyx/components/databridge/examples/prometheusjsonataaas/test/TestAASUpdater.java
+++ b/basyx.components.databridge.examples/basyx.components.databridge.examples.prometheus-jsonata-aas/src/test/java/basyx/components/databridge/examples/prometheusjsonataaas/test/TestAASUpdater.java
@@ -19,14 +19,14 @@ import org.junit.Test;
 import basyx.components.databridge.aas.configuration.factory.AASProducerDefaultConfigurationFactory;
 import basyx.components.databridge.camelprometheus.configuration.factory.PrometheusDefaultConfigurationFactory;
 import basyx.components.databridge.cameltimer.configuration.factory.TimerDefaultConfigurationFactory;
-import basyx.components.databridge.core.component.UpdaterComponent;
+import basyx.components.databridge.core.component.DataBridgeComponent;
 import basyx.components.databridge.core.configuration.factory.RoutesConfigurationFactory;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
 import basyx.components.databridge.transformer.cameljsonata.configuration.factory.JsonataDefaultConfigurationFactory;
 
 public class TestAASUpdater {
 	private static AASServerComponent aasServer;
-	private static UpdaterComponent updater;
+	private static DataBridgeComponent updater;
 	private static InMemoryRegistry registry;
 
 	protected static IIdentifier deviceAAS = new CustomId("TestUpdatedDeviceAAS");
@@ -72,7 +72,7 @@ public class TestAASUpdater {
 		TimerDefaultConfigurationFactory timerConfigFactory = new TimerDefaultConfigurationFactory(loader);
 		configuration.addDatasources(timerConfigFactory.create());
 
-		updater = new UpdaterComponent(configuration);
+		updater = new DataBridgeComponent(configuration);
 		updater.startComponent();
 		System.out.println("UPDATER STARTED");
 		checkIfPropertyIsUpdated();
diff --git a/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeExecutable.java b/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeExecutable.java
index dc63026..c8a6c1d 100644
--- a/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeExecutable.java
+++ b/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeExecutable.java
@@ -24,6 +24,9 @@
  ******************************************************************************/
 package basyx.components.databridge.executable;
 
+import basyx.components.databridge.core.component.DataBridgeComponent;
+import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
+
 /**
  * Starts the stand-alone databridge component
  *
@@ -34,14 +37,20 @@ public class DataBridgeExecutable {
 	private static final String DEFAULT_CONFIG_PATH = "/usr/share/config";
 	
 	public static void main(String[] args) throws IllegalArgumentException, SecurityException {
-		DataBridgeComponent dataBridgeComponent;
+		String configPath = getConfigPath(args);
 		
+		RoutesConfigurationLoader routesConfigurationLoader = new RoutesConfigurationLoader(configPath);
+
+		RoutesConfiguration config = routesConfigurationLoader.create();
+
+		new DataBridgeComponent(config).startComponent();
+	}
+
+	private static String getConfigPath(String[] args) {
 		if (args.length == 0) {
-			dataBridgeComponent = new DataBridgeComponent(DEFAULT_CONFIG_PATH);
+			return DEFAULT_CONFIG_PATH;
 		} else {
-			dataBridgeComponent = new DataBridgeComponent(args[0]);
+			return args[0];
 		}
-		
-		dataBridgeComponent.start();
 	}
 }
diff --git a/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeComponent.java b/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/RoutesConfigurationLoader.java
similarity index 88%
rename from basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeComponent.java
rename to basyx.components.databridge/src/main/java/basyx/components/databridge/executable/RoutesConfigurationLoader.java
index dd485d6..25b6683 100644
--- a/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/DataBridgeComponent.java
+++ b/basyx.components.databridge/src/main/java/basyx/components/databridge/executable/RoutesConfigurationLoader.java
@@ -31,7 +31,6 @@ import org.apache.commons.io.FilenameUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import basyx.components.databridge.core.component.UpdaterComponent;
 import basyx.components.databridge.core.configuration.entity.DataSinkConfiguration;
 import basyx.components.databridge.core.configuration.entity.DataSourceConfiguration;
 import basyx.components.databridge.core.configuration.entity.DataTransformerConfiguration;
@@ -47,27 +46,27 @@ import basyx.components.databridge.core.configuration.route.core.RoutesConfigura
  *
  * @author danish
  */
-public class DataBridgeComponent {
-	private static Logger logger = LoggerFactory.getLogger(DataBridgeComponent.class);
+public class RoutesConfigurationLoader {
+	private static Logger logger = LoggerFactory.getLogger(RoutesConfigurationLoader.class);
 
 	private String configFilePath;
 
-	public DataBridgeComponent(String configFilePath) {
+	public RoutesConfigurationLoader(String configFilePath) {
 		this.configFilePath = configFilePath;
 	}
 
-	public void start() {
+	public RoutesConfiguration create() {
 		ClassLoader loader = DataBridgeExecutable.class.getClassLoader();
 		RoutesConfiguration configuration = new RoutesConfiguration();
 
 		configureRouteFactory(loader, configuration);
 
 		addAvailableConfigurations(configuration);
-
-		startUpdaterComponent(configuration);
+		
+		return configuration;
 	}
 
-	public void addAvailableConfigurations(RoutesConfiguration configuration) {
+	private void addAvailableConfigurations(RoutesConfiguration configuration) {
 		Set<String> configFiles = DataBridgeUtils.getFiles(getConfigFilePath());
 
 		Set<Class<?>> classes = DataBridgeUtils.findAllConfigurationFactoryClasses(DataBridgeUtils.PACKAGE_PREFIX);
@@ -79,7 +78,7 @@ public class DataBridgeComponent {
 				.forEach(userInputConfigFilename -> addConfiguration(clazz, userInputConfigFilename, configuration)));
 	}
 	
-	public void addConfiguration(Class<?> clazz, String userInputConfigFilename, RoutesConfiguration configuration) {
+	private void addConfiguration(Class<?> clazz, String userInputConfigFilename, RoutesConfiguration configuration) {
 		if (DataSourceConfigurationFactory.class.isAssignableFrom(clazz)) {
 			addDataSource(getConfigFilePath() + "/" + userInputConfigFilename, clazz, configuration);
 		} else if (DataTransformerConfigurationFactory.class.isAssignableFrom(clazz)) {
@@ -91,7 +90,7 @@ public class DataBridgeComponent {
 		}
 	}
 	
-	public String getConfigFilePath() {
+	private String getConfigFilePath() {
 		return configFilePath;
 	}
 
@@ -130,9 +129,4 @@ public class DataBridgeComponent {
 
 		logger.info("Data sink added - {}", FilenameUtils.getName(path));
 	}
-	
-	private void startUpdaterComponent(RoutesConfiguration configuration) {
-		UpdaterComponent updater = new UpdaterComponent(configuration);
-		updater.startComponent();
-	}
 }
diff --git a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/DataBridgeUtilsTest.java b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/DataBridgeUtilsTest.java
new file mode 100644
index 0000000..d82d382
--- /dev/null
+++ b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/DataBridgeUtilsTest.java
@@ -0,0 +1,49 @@
+/*******************************************************************************
+ * Copyright (C) 2023 the Eclipse BaSyx Authors
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ * 
+ * SPDX-License-Identifier: MIT
+ ******************************************************************************/
+
+
+package basyx.components.databridge.regression;
+
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.junit.Test;
+
+import basyx.components.databridge.executable.DataBridgeUtils;
+
+public class DataBridgeUtilsTest {
+	@Test
+	public void loadedFileIsCorrect() throws IOException {
+		Set<String> configFiles = DataBridgeUtils.getFiles("src/test/resources");
+		
+		assertActiveMQConsumerIsFound(configFiles);
+	}
+
+	private void assertActiveMQConsumerIsFound(Set<String> configFiles) {
+		assertTrue(configFiles.stream().anyMatch(file -> file.contains("activemqconsumer.json")));
+	}
+}
diff --git a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeActiveMQ.java b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeActiveMQ.java
index d407f9a..7d37066 100644
--- a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeActiveMQ.java
+++ b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeActiveMQ.java
@@ -41,7 +41,7 @@ import org.eclipse.basyx.components.configuration.BaSyxContextConfiguration;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
-import basyx.components.databridge.executable.DataBridgeComponent;
+import basyx.components.databridge.executable.RoutesConfigurationLoader;
 
 /**
  * Tests the DataBridge with ActiveMQ
@@ -76,8 +76,8 @@ public class TestDataBridgeActiveMQ extends DataBridgeSuiteActiveMQ {
 	}
 	
 	private static void startUpdaterComponent() {
-		DataBridgeComponent dataBridgeComponent = new DataBridgeComponent("src/test/resources/activemq/databridge");
-		dataBridgeComponent.start();
+		RoutesConfigurationLoader routesConfigurationLoader = new RoutesConfigurationLoader("src/test/resources/activemq/databridge");
+		routesConfigurationLoader.start();
 	}
 	
 	@Override
diff --git a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeMqtt.java b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeMqtt.java
index bc09775..616df42 100644
--- a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeMqtt.java
+++ b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeMqtt.java
@@ -41,7 +41,7 @@ import org.eclipse.paho.client.mqttv3.MqttException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 
-import basyx.components.databridge.executable.DataBridgeComponent;
+import basyx.components.databridge.executable.RoutesConfigurationLoader;
 import io.moquette.broker.Server;
 import io.moquette.broker.config.ClasspathResourceLoader;
 import io.moquette.broker.config.IConfig;
@@ -90,8 +90,8 @@ public class TestDataBridgeMqtt extends DataBridgeSuiteMqtt {
 	}
 	
 	private static void startUpdaterComponent() {
-		DataBridgeComponent dataBridgeComponent = new DataBridgeComponent("src/test/resources/mqtt/databridge");
-		dataBridgeComponent.start();
+		RoutesConfigurationLoader routesConfigurationLoader = new RoutesConfigurationLoader("src/test/resources/mqtt/databridge");
+		routesConfigurationLoader.start();
 	}
 	
 	@Override
diff --git a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeComponent.java b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestRoutesConfigurationLoader.java
similarity index 56%
rename from basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeComponent.java
rename to basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestRoutesConfigurationLoader.java
index a42f660..bfb95b7 100644
--- a/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestDataBridgeComponent.java
+++ b/basyx.components.databridge/src/test/java/basyx/components/databridge/regression/TestRoutesConfigurationLoader.java
@@ -27,54 +27,32 @@ package basyx.components.databridge.regression;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.Set;
-
 import org.junit.Test;
+
 import basyx.components.databridge.camelactivemq.configuration.ActiveMQConsumerConfiguration;
 import basyx.components.databridge.core.configuration.route.core.RoutesConfiguration;
-import basyx.components.databridge.executable.DataBridgeComponent;
-import basyx.components.databridge.executable.DataBridgeUtils;
+import basyx.components.databridge.executable.RoutesConfigurationLoader;
 
 /**
- * Tests the DataBridge component scenarios 
+ * Tests the DataBridge component scenarios
  *
  * @author danish
  */
-public class TestDataBridgeComponent {
-	private static final String PATH_PREFIX = "src/test/resources";
-	
-	private static final String CONTENT = "[\r\n"
-			+ "	{\r\n"
-			+ "		\"uniqueId\": \"property1\",\r\n"
-			+ "		\"serverUrl\": \"127.0.0.1\",\r\n"
-			+ "		\"serverPort\": 61616,\r\n"
-			+ "		\"queue\": \"first-topic\"\r\n"
-			+ "	}\r\n"
-			+ "]";
-	
-	@Test
-	public void loadedFileIsCorrect() throws IOException {
-		Set<String> configFiles = DataBridgeUtils.getFiles(PATH_PREFIX);
-		
-		assertEquals(CONTENT, Files.readString(Path.of(PATH_PREFIX + "/" + configFiles.stream().filter(file -> file.contains("activemqconsumer.json")).findAny().get())));
-	}
-	
+public class TestRoutesConfigurationLoader {
+	private static final String PATH_PREFIX = "src/test/resources/activemq/databridge";
+
 	@Test
 	public void configFactoryisCorrect() {
-		RoutesConfiguration configuration = new RoutesConfiguration();
-		
-		configureDataBridgeComponent(configuration);
-		
-		assertTrue(configuration.getDatasources().get("property1") instanceof ActiveMQConsumerConfiguration);
-		
-		assertTrue(configuration.getDatasinks().size() == 0 && configuration.getRoutes().size() == 0 && configuration.getTransformers().size() == 0);
+		RoutesConfiguration configuration = new RoutesConfigurationLoader(PATH_PREFIX).create();
+
+		assertRoutesConfigurationIsCorrect(configuration);
 	}
 
-	private void configureDataBridgeComponent(RoutesConfiguration configuration) {
-		DataBridgeComponent dataBridgeComponent = new DataBridgeComponent(PATH_PREFIX);
-		dataBridgeComponent.addAvailableConfigurations(configuration);
+	private void assertRoutesConfigurationIsCorrect(RoutesConfiguration configuration) {
+		assertEquals(2, configuration.getDatasources().size());
+		assertEquals(2, configuration.getTransformers().size());
+		assertEquals(2, configuration.getDatasinks().size());
+
+		assertTrue(configuration.getDatasources().get("property1") instanceof ActiveMQConsumerConfiguration);
 	}
 }
diff --git a/basyx.components.databridge/src/test/resources/activemqconsumer.json b/basyx.components.databridge/src/test/resources/activemqconsumer.json
deleted file mode 100644
index 3172917..0000000
--- a/basyx.components.databridge/src/test/resources/activemqconsumer.json
+++ /dev/null
@@ -1,8 +0,0 @@
-[
-	{
-		"uniqueId": "property1",
-		"serverUrl": "127.0.0.1",
-		"serverPort": 61616,
-		"queue": "first-topic"
-	}
-]
\ No newline at end of file
-- 
2.15.0.windows.1

