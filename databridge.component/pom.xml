<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.eclipse.digitaltwin.basyx</groupId>
		<artifactId>databridge.parent</artifactId>
		<version>${revision}</version>
	</parent>
	<artifactId>databridge.component</artifactId>
	<name>DataBridge Component</name>
	<description>DataBridge standalone component</description>

	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<basyx.databridge.executable>org.eclipse.digitaltwin.basyx.databridge.component.DataBridgeExecutable</basyx.databridge.executable>
	</properties>

	<!-- Define additional plugins that are not included by default -->
	<!-- Plugin configuration is done in parent project(s) -->
	<build>
		<plugins>
			<!-- Compile Java sources using Java 11 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.12.1</version>
				<configuration>
					<source>11</source>
					<target>11</target>
				</configuration>
			</plugin>

			<!-- Attach sources to jar file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
			</plugin>

			<!-- + create the executable jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>${basyx.databridge.executable}</mainClass>
						</manifest>
					</archive>
					<excludes>
						<exclude>**/logback.xml</exclude>
					</excludes>
					<executions>
						<execution>
							<goals>
								<goal>test-jar</goal>
							</goals>
						</execution>
					</executions>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>2.0.11</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.core</artifactId>
			<version>${revision}</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-paho</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-aas</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-jsonata</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-activemq</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-hono</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-httppolling</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-kafka</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-opcua</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-sql</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-timer</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-jsonjackson</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.camel-plc4x</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.examples.plc4x-jsonata-aas</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.examples.aas-jsonata-mqtt</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.examples.sql-jsonata-aas</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.examples.aas-jsonata-http</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.digitaltwin.basyx</groupId>
			<artifactId>databridge.examples.httpserver</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
			<version>2.14.1</version>
		</dependency>

		<!-- BaSyx SDK -->
		<dependency>
			<groupId>org.eclipse.basyx</groupId>
			<artifactId>basyx.sdk</artifactId>
			<version>1.2.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.eclipse.milo</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- BaSyx SDK tests -->
		<dependency>
			<groupId>org.eclipse.basyx</groupId>
			<artifactId>basyx.sdk</artifactId>
			<version>1.4.0</version>
			<classifier>tests</classifier>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.eclipse.milo</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Depends on the components library -->
		<dependency>
			<groupId>org.eclipse.basyx</groupId>
			<artifactId>basyx.components.lib</artifactId>
			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.basyx</groupId>
			<artifactId>basyx.components.AASServer</artifactId>
			<version>1.2.0</version>
		</dependency>

		<!-- JUnit 4 for running JUnit tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.10.2</version>
		</dependency>

		<!-- Moquette MQTT broker for testing MQTT events -->
		<dependency>
			<groupId>io.moquette</groupId>
			<artifactId>moquette-broker</artifactId>
			<version>0.16</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.awaitility/awaitility -->
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>4.2.0</version>
			<scope>test</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mock-server/mockserver-netty -->
		<dependency>
			<groupId>org.mock-server</groupId>
			<artifactId>mockserver-netty</artifactId>
			<version>5.15.0</version>
			<scope>test</scope>
		</dependency>

		<!--
		https://mvnrepository.com/artifact/org.mock-server/mockserver-client-java -->
		<dependency>
			<groupId>org.mock-server</groupId>
			<artifactId>mockserver-client-java</artifactId>
			<version>5.15.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<!-- "Docker" profile - do not build & install docker images by default 
				Run "mvn install -Pdocker" in order to include docker -->
			<id>docker</id>
			<build>
				<plugins>
					<!-- Read maven properties from file -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>properties-maven-plugin</artifactId>
						<version>1.2.0</version>
						<executions>
							<execution>
								<phase>initialize</phase>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>${project.basedir}/src/test/resources/.env</file>
									</files>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Copy the dependencies necessary to run the jar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-dependencies</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
								<configuration>
									<includeScope>compile</includeScope>
									<outputDirectory>${project.build.directory}/lib/</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Build the docker image -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.43.2</version>
						<configuration>
							<images>
								<image>
									<name>${BASYX_IMAGE_NAME}:${BASYX_IMAGE_TAG}</name>
									<build>
										<contextDir>${project.basedir}</contextDir>
										<args>
											<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
										</args>
									</build>
								</image>
							</images>
							<verbose>true</verbose>
						</configuration>
						<executions>
							<execution>
								<id>docker:build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- Create integration test environment -->
					<plugin>
						<groupId>com.dkanejs.maven.plugins</groupId>
						<artifactId>docker-compose-maven-plugin</artifactId>
						<version>4.0.0</version>
						<configuration>
							<composeFile>${project.basedir}/docker-compose.yml</composeFile>
							<detachedMode>true</detachedMode>
							<envFile>${project.basedir}/src/test/resources/.env</envFile>
							<envVars>
								<BASYX_IMAGE_TAG>${BASYX_IMAGE_TAG}</BASYX_IMAGE_TAG>
								<BASYX_IMAGE_NAME>${BASYX_IMAGE_NAME}</BASYX_IMAGE_NAME>
								<VOLUME_MAPPING>${project.basedir}/src/test/resources/mqtt</VOLUME_MAPPING>
							</envVars>
						</configuration>
						<executions>
							<execution>
								<id>docker-compose-up</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>up</goal>
								</goals>
							</execution>
							<execution>
								<id>docker-compose-down</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>down</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- Run integration tests -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>3.1.0</version>
						<configuration>
							<systemPropertyVariables>
								<VOLUME_MAPPING>${project.basedir}/src/test/resources/mqtt/databridge</VOLUME_MAPPING>
							</systemPropertyVariables>
							<includes>
								<include>**/ITTestDataBridgeMqtt.java</include>
							</includes>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>